import dotenv from "dotenv"
import path from "path"
import { fileURLToPath } from "url"
import { neon } from "@neondatabase/serverless"

// –ü–æ–ª—É—á–∞–µ–º dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, "../.env") })

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ Instagram Reels –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */
async function rebuildMultiTenantDatabase() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  if (process.env.CONFIRM !== "YES") {
    console.log(
      "\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É."
    )
    console.log("‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    console.log(
      "‚ö†Ô∏è  –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞–π—Ç–µ CONFIRM=YES –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."
    )
    console.log(
      "\n‚õî –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ CONFIRM=YES –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    return
  }

  if (!process.env.NEON_DATABASE_URL) {
    console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è NEON_DATABASE_URL")
    process.exit(1)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQL –∫–ª–∏–µ–Ω—Ç–∞
  const sql = neon(process.env.NEON_DATABASE_URL)

  try {
    console.log("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database...")

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesRes = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `
    const tables = tablesRes.map(r => r.table_name)

    console.log("üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:", tables.join(", ") || "—Ç–∞–±–ª–∏—Ü –Ω–µ—Ç")

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
    for (const table of tables) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º sql.raw –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã
      await sql`DROP TABLE IF EXISTS "${sql.unsafe(table)}" CASCADE`
      console.log(`  ‚úì –¢–∞–±–ª–∏—Ü–∞ "${table}" —É–¥–∞–ª–µ–Ω–∞`)
    }

    console.log("\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Users (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Users...")
    await sql`
      CREATE TABLE Users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        last_name VARCHAR(255),
        subscription_level VARCHAR(50) DEFAULT 'free',
        subscription_expires_at TIMESTAMPTZ,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        last_active_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        settings JSONB
      )
    `

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É Projects (–ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Projects...")
    await sql`
      CREATE TABLE Projects (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES Users(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        industry VARCHAR(100),
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        is_active BOOLEAN DEFAULT TRUE,
        settings JSONB
      )
    `

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É CompetitorAccounts (–ê–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã CompetitorAccounts...")
    await sql`
      CREATE TABLE CompetitorAccounts (
        id SERIAL PRIMARY KEY,
        project_id INTEGER REFERENCES Projects(id) ON DELETE CASCADE,
        instagram_url VARCHAR(255) NOT NULL,
        instagram_username VARCHAR(100),
        account_name VARCHAR(255),
        notes TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        last_parsed_at TIMESTAMPTZ,
        priority INTEGER DEFAULT 0
      )
    `

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É TrackingHashtags (–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ö—ç—à—Ç–µ–≥–∏)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã TrackingHashtags...")
    await sql`
      CREATE TABLE TrackingHashtags (
        id SERIAL PRIMARY KEY,
        project_id INTEGER REFERENCES Projects(id) ON DELETE CASCADE,
        hashtag VARCHAR(100) NOT NULL,
        display_name VARCHAR(255),
        notes TEXT,
        is_active BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        last_parsed_at TIMESTAMPTZ,
        priority INTEGER DEFAULT 0
      )
    `

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É InstagramReels (–î–∞–Ω–Ω—ã–µ –æ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö Reels)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã InstagramReels...")
    await sql`
      CREATE TABLE InstagramReels (
        id SERIAL PRIMARY KEY,
        reels_url VARCHAR(255) UNIQUE NOT NULL,
        publication_date TIMESTAMPTZ,
        views_count BIGINT,
        likes_count BIGINT,
        comments_count INTEGER,
        description TEXT,
        author_username VARCHAR(100),
        author_id VARCHAR(100),
        audio_title TEXT,
        audio_artist VARCHAR(255),
        thumbnail_url VARCHAR(255),
        duration_seconds INTEGER,
        raw_data JSONB,
        parsed_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      )
    `

    // 6. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ContentSources (–°–≤—è–∑—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ContentSources...")
    await sql`
      CREATE TABLE ContentSources (
        id SERIAL PRIMARY KEY,
        reels_id INTEGER REFERENCES InstagramReels(id) ON DELETE CASCADE,
        source_type VARCHAR(20) NOT NULL,
        competitor_id INTEGER REFERENCES CompetitorAccounts(id) ON DELETE SET NULL,
        hashtag_id INTEGER REFERENCES TrackingHashtags(id) ON DELETE SET NULL,
        project_id INTEGER REFERENCES Projects(id) ON DELETE CASCADE,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        CHECK (
          (source_type = 'competitor' AND competitor_id IS NOT NULL AND hashtag_id IS NULL) OR
          (source_type = 'hashtag' AND hashtag_id IS NOT NULL AND competitor_id IS NULL)
        )
      )
    `

    // 7. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É UserContentInteractions (–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã UserContentInteractions...")
    await sql`
      CREATE TABLE UserContentInteractions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES Users(id) ON DELETE CASCADE,
        reels_id INTEGER REFERENCES InstagramReels(id) ON DELETE CASCADE,
        is_favorite BOOLEAN DEFAULT FALSE,
        is_hidden BOOLEAN DEFAULT FALSE,
        notes TEXT,
        created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, reels_id)
      )
    `

    // 8. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ParsingLogs (–õ–æ–≥–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞)
    console.log("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ParsingLogs...")
    await sql`
      CREATE TABLE ParsingLogs (
        id SERIAL PRIMARY KEY,
        run_id UUID NOT NULL,
        project_id INTEGER REFERENCES Projects(id) ON DELETE CASCADE,
        source_type VARCHAR(20) NOT NULL,
        source_id INTEGER,
        status VARCHAR(20) NOT NULL,
        reels_added_count INTEGER DEFAULT 0,
        errors_count INTEGER DEFAULT 0,
        start_time TIMESTAMPTZ NOT NULL,
        end_time TIMESTAMPTZ,
        log_message TEXT,
        error_details JSONB
      )
    `

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log("\nüìà –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤...")

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è Users
    await sql`CREATE INDEX idx_users_telegram_id ON Users (telegram_id)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è Projects
    await sql`CREATE INDEX idx_projects_user_id ON Projects (user_id)`
    await sql`CREATE INDEX idx_projects_is_active ON Projects (is_active)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è CompetitorAccounts
    await sql`CREATE INDEX idx_competitor_accounts_project_id ON CompetitorAccounts (project_id)`
    await sql`CREATE INDEX idx_competitor_accounts_is_active ON CompetitorAccounts (is_active)`
    await sql`CREATE INDEX idx_competitor_accounts_last_parsed_at ON CompetitorAccounts (last_parsed_at)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è TrackingHashtags
    await sql`CREATE INDEX idx_tracking_hashtags_project_id ON TrackingHashtags (project_id)`
    await sql`CREATE INDEX idx_tracking_hashtags_is_active ON TrackingHashtags (is_active)`
    await sql`CREATE INDEX idx_tracking_hashtags_hashtag ON TrackingHashtags (hashtag)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è InstagramReels
    await sql`CREATE INDEX idx_instagram_reels_publication_date ON InstagramReels (publication_date)`
    await sql`CREATE INDEX idx_instagram_reels_views_count ON InstagramReels (views_count)`
    await sql`CREATE INDEX idx_instagram_reels_author_username ON InstagramReels (author_username)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ContentSources
    await sql`CREATE INDEX idx_content_sources_reels_id ON ContentSources (reels_id)`
    await sql`CREATE INDEX idx_content_sources_project_id ON ContentSources (project_id)`
    await sql`CREATE INDEX idx_content_sources_competitor_id ON ContentSources (competitor_id)`
    await sql`CREATE INDEX idx_content_sources_hashtag_id ON ContentSources (hashtag_id)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è UserContentInteractions
    await sql`CREATE INDEX idx_user_content_interactions_user_id ON UserContentInteractions (user_id)`
    await sql`CREATE INDEX idx_user_content_interactions_reels_id ON UserContentInteractions (reels_id)`
    await sql`CREATE INDEX idx_user_content_interactions_is_favorite ON UserContentInteractions (is_favorite)`

    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è ParsingLogs
    await sql`CREATE INDEX idx_parsing_logs_project_id ON ParsingLogs (project_id)`
    await sql`CREATE INDEX idx_parsing_logs_run_id ON ParsingLogs (run_id)`

    console.log("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü:")

    const newTablesRes = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `
    const newTables = newTablesRes.map(r => r.table_name)

    for (const table of newTables) {
      const columnsRes = await sql`
        SELECT column_name, data_type, is_nullable 
        FROM information_schema.columns 
        WHERE table_name = ${table} 
        ORDER BY ordinal_position
      `

      console.log(`\nüìã –¢–∞–±–ª–∏—Ü–∞: ${table}`)
      columnsRes.forEach(col => {
        console.log(
          `  - ${col.column_name} (${col.data_type})${col.is_nullable === "NO" ? " NOT NULL" : ""}`
        )
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

    // –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const testUserRes = await sql`
      INSERT INTO Users (telegram_id, username, first_name, last_name, subscription_level) 
      VALUES (123456789, 'test_user', 'Test', 'User', 'premium')
      RETURNING id
    `
    const testUserId = testUserRes[0].id
    console.log(`  ‚úì –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω (ID: ${testUserId})`)

    // –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const testProjectRes = await sql`
      INSERT INTO Projects (user_id, name, description, industry) 
      VALUES (${testUserId}, '–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –ö–ª–∏–Ω–∏–∫–∞', '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤', '–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞')
      RETURNING id
    `
    const testProjectId = testProjectRes[0].id
    console.log(`  ‚úì –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω (ID: ${testProjectId})`)

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const accounts = [
      "https://www.instagram.com/clinicajoelleofficial",
      "https://www.instagram.com/kayaclinicarabia/",
      "https://www.instagram.com/lips_for_kiss",
      "https://www.instagram.com/ziedasclinic",
      "https://www.instagram.com/med_yu_med",
      "https://www.instagram.com/milena_aesthetic_clinic/",
      "https://www.instagram.com/graise.aesthetics",
    ]

    for (let i = 0; i < accounts.length; i++) {
      const account = accounts[i]
      await sql`
        INSERT INTO CompetitorAccounts (project_id, instagram_url, account_name, priority) 
        VALUES (${testProjectId}, ${account}, ${`–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç ${i + 1}`}, ${i})
      `
      console.log(`  ‚úì –ê–∫–∫–∞—É–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ "${account}" –¥–æ–±–∞–≤–ª–µ–Ω`)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥–∏
    const hashtags = [
      "aestheticmedicine",
      "aestheticclinic",
      "cosmetology",
      "hydrafacial",
      "botox",
      "fillers",
      "beautyclinic",
      "skincare",
      "prpfacial",
      "rfmicroneedling",
      "skinrejuvenation",
      "facialtreatment",
      "aesthetictreatment",
    ]

    for (let i = 0; i < hashtags.length; i++) {
      const hashtag = hashtags[i]
      await sql`
        INSERT INTO TrackingHashtags (project_id, hashtag, display_name, priority) 
        VALUES (${testProjectId}, ${hashtag}, ${`#${hashtag}`}, ${i})
      `
      console.log(`  ‚úì –•—ç—à—Ç–µ–≥ "#${hashtag}" –¥–æ–±–∞–≤–ª–µ–Ω`)
    }

    console.log("\nüéâ –ú—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞!")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º—É–ª—å—Ç–∏—Ç–µ–Ω–∞–Ω—Ç–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error)
    process.exit(1)
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
rebuildMultiTenantDatabase()
