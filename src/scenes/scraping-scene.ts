import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "../types";
import { ScraperSceneStep } from "../types";
import { logger } from "../logger";

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫—Ä–∞–ø–∏–Ω–≥–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ Instagram
 */
export const scrapingScene = new Scenes.BaseScene<ScraperBotContext>(
  "instagram_scraper_scraping"
);

// --- Enter Scene Handler ---
export async function handleScrapingEnter(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] Enter handler triggered");

  if (!ctx.from) {
    logger.error("[ScrapingScene] ctx.from is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    );
    return ctx.scene.leave();
  }

  // –ü–æ–ª—É—á–∞–µ–º projectId –∏–∑ —Å–µ—Å—Å–∏–∏
  const projectId = ctx.scene.session.currentProjectId;

  if (!projectId) {
    logger.error("[ScrapingScene] Project ID is undefined");
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞."
    );
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_MENU;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
    const project = await ctx.storage.getProjectById(projectId);

    if (!project) {
      logger.error(`[ScrapingScene] Project with ID ${projectId} not found`);
      await ctx.reply(
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω."
      );
      ctx.scene.enter("instagram_scraper_projects");
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await ctx.storage.getCompetitorAccounts(projectId, true);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üîç *–°–∫—Ä–∞–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.name}"*\n\n`;

    if (competitors.length === 0 && (!hashtags || hashtags.length === 0)) {
      message += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.\n";
      message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ö–µ—à—Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.";

      await ctx.reply(message, {
        parse_mode: "Markdown",
        ...Markup.inlineKeyboard([
          [Markup.button.callback("üë• –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `competitors_project_${projectId}`)],
          [Markup.button.callback("üìä –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `manage_hashtags_${projectId}`)],
          [Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]
        ])
      });

      return;
    }

    message += "*–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    if (competitors.length > 0) {
      message += `üë• *–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (${competitors.length}):*\n`;
      competitors.slice(0, 5).forEach((competitor, index) => {
        message += `${index + 1}. ${competitor.username}\n`;
      });
      if (competitors.length > 5) {
        message += `...–∏ –µ—â–µ ${competitors.length - 5}\n`;
      }
      message += "\n";
    }

    if (hashtags && hashtags.length > 0) {
      message += `üìä *–•–µ—à—Ç–µ–≥–∏ (${hashtags.length}):*\n`;
      hashtags.slice(0, 5).forEach((hashtag, index) => {
        message += `${index + 1}. #${hashtag.hashtag}\n`;
      });
      if (hashtags.length > 5) {
        message += `...–∏ –µ—â–µ ${hashtags.length - 5}\n`;
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    const keyboard = [];

    if (competitors.length > 0) {
      keyboard.push([Markup.button.callback("üë• –°–∫—Ä–∞–ø–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_competitors_${projectId}`)]);
    }

    if (hashtags && hashtags.length > 0) {
      keyboard.push([Markup.button.callback("üìä –°–∫—Ä–∞–ø–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏", `scrape_hashtags_${projectId}`)]);
    }

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å—ë", `scrape_all_${projectId}`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)]);

    await ctx.reply(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });
  } catch (error) {
    logger.error("[ScrapingScene] Error in enter handler:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
    await ctx.scene.leave();
  } finally {
    await ctx.storage.close();
  }
}

scrapingScene.enter(handleScrapingEnter);

// --- Action Handlers ---

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
export async function handleScrapeCompetitorsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeCompetitorsAction triggered");

  const projectId = parseInt((ctx.match as unknown as RegExpExecArray)[1], 10);
  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_COMPETITORS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const competitors = await ctx.storage.getCompetitorAccounts(projectId, true);

    if (competitors.length === 0) {
      await ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    let message = "üë• *–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    const keyboard = competitors.map((competitor) => [
      Markup.button.callback(
        competitor.username,
        `scrape_competitor_${projectId}_${competitor.id}`
      )
    ]);

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤", `scrape_all_competitors_${projectId}`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_scraping_menu`)]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeCompetitorsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

scrapingScene.action(/scrape_competitors_(\d+)/, handleScrapeCompetitorsAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
export async function handleScrapeHashtagsAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleScrapeHashtagsAction triggered");

  const projectId = parseInt((ctx.match as unknown as RegExpExecArray)[1], 10);
  if (isNaN(projectId)) {
    logger.warn("[ScrapingScene] Invalid project ID from action match");
    if (ctx.callbackQuery) await ctx.answerCbQuery("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞.");
    ctx.scene.reenter();
    return;
  }

  ctx.scene.session.currentProjectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.SCRAPING_HASHTAGS;

  try {
    await ctx.storage.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤
    const hashtags = await ctx.storage.getHashtagsByProjectId(projectId);

    if (!hashtags || hashtags.length === 0) {
      await ctx.answerCbQuery("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤.");
      ctx.scene.reenter();
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ö–µ—à—Ç–µ–≥–æ–≤
    let message = "üìä *–í—ã–±–µ—Ä–∏—Ç–µ —Ö–µ—à—Ç–µ–≥–∏ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:*\n\n";

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
    const keyboard = hashtags.map((hashtag) => [
      Markup.button.callback(
        `#${hashtag.hashtag}`,
        `scrape_hashtag_${projectId}_${hashtag.id}`
      )
    ]);

    keyboard.push([Markup.button.callback("üîÑ –°–∫—Ä–∞–ø–∏—Ç—å –≤—Å–µ —Ö–µ—à—Ç–µ–≥–∏", `scrape_all_hashtags_${projectId}`)]);
    keyboard.push([Markup.button.callback("üîô –ù–∞–∑–∞–¥", `back_to_scraping_menu`)]);

    await ctx.editMessageText(message, {
      parse_mode: "Markdown",
      ...Markup.inlineKeyboard(keyboard)
    });

    if (ctx.callbackQuery) {
      await ctx.answerCbQuery();
    }
  } catch (error) {
    logger.error("[ScrapingScene] Error in handleScrapeHashtagsAction:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    );
  } finally {
    await ctx.storage.close();
  }
}

scrapingScene.action(/scrape_hashtags_(\d+)/, handleScrapeHashtagsAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
export async function handleBackToScrapingMenuAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleBackToScrapingMenuAction triggered");

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  ctx.scene.reenter();
  return;
}

scrapingScene.action("back_to_scraping_menu", handleBackToScrapingMenuAction);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É
export async function handleBackToProjectAction(ctx: ScraperBotContext): Promise<void> {
  logger.info("[ScrapingScene] handleBackToProjectAction triggered");

  const projectId = ctx.scene.session.currentProjectId;

  if (ctx.callbackQuery) {
    await ctx.answerCbQuery();
  }

  if (!projectId) {
    ctx.scene.enter("instagram_scraper_projects");
    return;
  }

  ctx.scene.enter("instagram_scraper_projects", { projectId });
  return;
}

scrapingScene.action(/project_(\d+)/, handleBackToProjectAction);

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
export default scrapingScene;
