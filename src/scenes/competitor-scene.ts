import { Scenes, Markup } from "telegraf";
import { ScraperBotContext } from "../types";
import { NeonAdapter } from "../adapters/neon-adapter";
import { ScraperSceneStep, ScraperSceneSessionData } from "@/types";
import {
  isValidInstagramUrl,
  extractUsernameFromUrl,
} from "../utils/validation";

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞.
 */
export const handleDeleteCompetitorAction = async (
  ctx: ScraperBotContext & { match: RegExpExecArray }
) => {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = parseInt(ctx.match[1], 10);
  const username = ctx.match[2];

  if (isNaN(projectId) || !username) {
    console.error(
      `Invalid data parsed from delete action: projectId=${ctx.match[1]}, username=${ctx.match[2]}`
    );
    await ctx.reply(
      "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    return;
  }

  let success = false;
  try {
    await adapter.initialize();
    success = await adapter.deleteCompetitorAccount(projectId, username);

    if (success) {
      await ctx.reply(`–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç "${username}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞.`);
      await ctx.editMessageReplyMarkup(undefined);
      await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
    } else {
      await ctx.reply(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ "${username}". –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.`
      );
      await ctx.answerCbQuery("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ ${username} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
  } finally {
    if (adapter) {
      await adapter.close();
    }
  }
};

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏
 */
export const competitorScene = new Scenes.BaseScene<
  ScraperBotContext & { scene: { session: ScraperSceneSessionData } }
>("instagram_scraper_competitors");

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É - –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ –ø–æ–∫–∞–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –æ–¥–∏–Ω
export async function handleCompetitorEnter(ctx: ScraperBotContext) {
  const adapter = ctx.storage as NeonAdapter;
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º adapter –≤–º–µ—Å—Ç–æ neonAdapter
    await adapter.initialize();

    const user = await adapter.getUserByTelegramId(ctx.from?.id || 0);

    if (!user) {
      await ctx.reply(
        "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      await adapter.close();
      return ctx.scene.leave(); // –Ø–≤–Ω—ã–π return
    }

    const projects = await adapter.getProjectsByUserId(user.id as number); // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ user.id

    if (!projects || projects.length === 0) {
      await ctx.reply(
        "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /projects"
      );
      await adapter.close();
      return ctx.scene.leave(); // –Ø–≤–Ω—ã–π return
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–µ–∫—Ç, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    if (projects.length === 1) {
      const competitors = await adapter.getCompetitorAccounts(projects[0].id);

      if (!competitors || competitors.length === 0) {
        await ctx.reply(
          `–í –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}" –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?`,
          {
            reply_markup: Markup.inlineKeyboard([
              [
                Markup.button.callback(
                  "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                  `add_competitor_${projects[0].id}`
                ),
              ],
              [Markup.button.callback("–í—ã–π—Ç–∏", "exit_scene")],
            ]).reply_markup,
          }
        );
      } else {
        const competitorList = competitors
          .map((c, i) => `${i + 1}. [${c.username}](${c.instagram_url})`)
          .join("\n");

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const competitorButtons = competitors.map((c) => [
          Markup.button.callback(
            `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${c.username}`,
            `delete_competitor_${projects[0].id}_${c.username}`
          ),
        ]);

        await ctx.reply(
          `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projects[0].name}":\n\n${competitorList}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
          {
            parse_mode: "Markdown",
            reply_markup: Markup.inlineKeyboard([
              ...competitorButtons, // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
              [
                Markup.button.callback(
                  "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                  `add_competitor_${projects[0].id}`
                ),
              ],
              [Markup.button.callback("–í—ã–π—Ç–∏", "exit_scene")],
            ]).reply_markup,
          }
        );
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ–∫—Ç–æ–≤, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å
      const projectButtons = projects.map((project) => [
        Markup.button.callback(
          project.name,
          `competitors_project_${project.id}`
        ),
      ]);

      projectButtons.push([Markup.button.callback("–í—ã–π—Ç–∏", "exit_scene")]);

      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:", {
        reply_markup: Markup.inlineKeyboard(projectButtons).reply_markup,
      });
    }

    await adapter.close();
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:", error);
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    // await adapter.close(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤ finally –∏–ª–∏ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –∞–¥–∞–ø—Ç–µ—Ä–æ–º
    await ctx.scene.leave();
  }
}

competitorScene.enter(handleCompetitorEnter);

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */
export async function handleCompetitorsProjectAction(
  ctx: ScraperBotContext & { match: RegExpExecArray }
) {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = parseInt(ctx.match![1]); // ctx.match –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å –ø–æ –ª–æ–≥–∏–∫–µ action

  try {
    await adapter.initialize();

    const competitors = await adapter.getCompetitorAccounts(projectId);

    if (!competitors || competitors.length === 0) {
      await ctx.reply(
        "–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å?",
        {
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                `add_competitor_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", "back_to_projects")],
            [Markup.button.callback("–í—ã–π—Ç–∏", "exit_scene")],
          ]).reply_markup,
        }
      );
    } else {
      const competitorList = competitors
        .map((c, i) => `${i + 1}. [${c.username}](${c.instagram_url})`)
        .join("\n");

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
      const competitorButtons = competitors.map((c) => [
        Markup.button.callback(
          `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ${c.username}`,
          `delete_competitor_${projectId}_${c.username}`
        ),
      ]);

      await ctx.reply(
        `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ:\n\n${competitorList}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
        {
          parse_mode: "Markdown",
          reply_markup: Markup.inlineKeyboard([
            ...competitorButtons, // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞",
                `add_competitor_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", "back_to_projects")],
            [Markup.button.callback("–í—ã–π—Ç–∏", "exit_scene")],
          ]).reply_markup,
        }
      );
    }

    await adapter.close();
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
    // await adapter.close();
  }

  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
 */
export async function handleAddCompetitorAction(
  ctx: ScraperBotContext & { match: RegExpExecArray }
) {
  const projectId = parseInt(ctx.match![1]);

  if (isNaN(projectId)) {
    console.error(`Invalid projectId parsed from action: ${ctx.match![1]}`);
    await ctx.reply(
      "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å–Ω–æ–≤–∞."
    );
    await ctx.answerCbQuery();
    return;
  }

  ctx.scene.session.projectId = projectId;
  await ctx.reply(
    "–í–≤–µ–¥–∏—Ç–µ Instagram URL –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.instagram.com/example):"
  );
  ctx.scene.session.step = ScraperSceneStep.ADD_COMPETITOR;
  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è competitorScene
 */
export async function handleCompetitorText(
  ctx: ScraperBotContext & {
    scene: {
      session: ScraperSceneSessionData;
      leave: () => void;
      reenter: () => void;
    };
    message: { text: string };
  }
) {
  if (ctx.scene.session.step !== ScraperSceneStep.ADD_COMPETITOR) {
    return;
  }

  const adapter = ctx.storage; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ctx.storage –Ω–∞–ø—Ä—è–º—É—é
  const { projectId } = ctx.scene.session;
  const instagramUrl = ctx.message.text;

  if (!projectId) {
    await ctx.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    ctx.scene.session.step = undefined; // –°–±—Ä–æ—Å —à–∞–≥–∞
    return ctx.scene.reenter();
  }

  if (!isValidInstagramUrl(instagramUrl)) {
    await ctx.reply(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL Instagram-–∞–∫–∫–∞—É–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://www.instagram.com/example):"
    );
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥, –¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
    return;
  }

  const username = extractUsernameFromUrl(instagramUrl);
  if (!username) {
    await ctx.reply(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
    // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
    return;
  }

  try {
    await adapter.initialize();
    const user = await adapter.getUserByTelegramId(ctx.from?.id || 0);

    if (!user) {
      console.error(
        `handleCompetitorText: User not found for telegramId: ${ctx.from?.id}`
      );
      await ctx.reply(
        "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
      );
      ctx.scene.session.step = undefined;
      return ctx.scene.leave();
    }

    const competitor = await adapter.addCompetitorAccount(
      projectId,
      username,
      instagramUrl
    );

    if (competitor) {
      await ctx.reply(
        `–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç @${username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`,
        Markup.inlineKeyboard([
          [
            Markup.button.callback(
              "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ",
              `add_competitor_${projectId}`
            ),
          ],
          [
            Markup.button.callback(
              "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
              `competitors_project_${projectId}`
            ),
          ],
          [Markup.button.callback("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", "back_to_projects")],
        ])
      );
    } else {
      await ctx.reply(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ @${username}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.`
      );
    }
    ctx.scene.session.step = undefined; // –°–±—Ä–æ—Å —à–∞–≥–∞ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    return; // –Ø–≤–Ω—ã–π return
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –≤ —Å—Ü–µ–Ω–µ:", error);
    await ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
    ctx.scene.session.step = undefined; // –°–±—Ä–æ—Å —à–∞–≥–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return; // –Ø–≤–Ω—ã–π return
  } finally {
    if (adapter && typeof adapter.close === "function") {
      await adapter.close();
    }
  }
  // –ù–µ—è–≤–Ω—ã–π return –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø—É—Ç–∏ –≤—ã—à–µ –∏–º–µ—é—Ç return –∏–ª–∏ throw
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
competitorScene.on("text", handleCompetitorText);

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
 */
export async function handleExitCompetitorSceneAction(ctx: ScraperBotContext) {
  await ctx.reply("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏.", {
    reply_markup: { remove_keyboard: true },
  });

  // –ï—Å–ª–∏ –µ—Å—Ç—å ID –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —ç—Ç–∏–º ID
  if (ctx.scene.session.currentProjectId) {
    await ctx.scene.leave();
    await ctx.scene.enter("projectScene", {
      projectId: ctx.scene.session.currentProjectId,
    });
  } else {
    await ctx.scene.leave();
  }

  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º"
 */
export async function handleBackToProjectsCompetitorAction(
  ctx: ScraperBotContext & { customSceneEnterMock?: any }
) {
  await ctx.answerCbQuery();
  // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Å—Ü–µ–Ω–∞ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤–µ—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ projectScene
  if (ctx.customSceneEnterMock) {
    await ctx.customSceneEnterMock("instagram_scraper_projects");
  } else {
    await ctx.scene.enter("instagram_scraper_projects"); // –ò–º—è –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ —Å—Ü–µ–Ω–µ
competitorScene.action(
  /competitors_project_(\d+)/,
  handleCompetitorsProjectAction
);
competitorScene.action(/add_competitor_(\d+)/, handleAddCompetitorAction);
competitorScene.action("exit_scene", handleExitCompetitorSceneAction);
competitorScene.action(
  "back_to_projects",
  handleBackToProjectsCompetitorAction as any // –ò—Å–ø–æ–ª—å–∑—É–µ–º as any –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
);
competitorScene.action(
  /delete_competitor_(\d+)_(.+)/,
  handleDeleteCompetitorAction
);


export default competitorScene;
