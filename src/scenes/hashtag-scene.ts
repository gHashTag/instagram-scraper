import { Scenes, Markup } from "telegraf";
import type { ScraperBotContext } from "@/types";
import { NeonAdapter } from "../adapters/neon-adapter";
import { ScraperSceneStep, ScraperSceneSessionData } from "@/types";
// import { PAGINATION_LIMIT } from "./components/keyboard-pagination"; // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
// import { User } from "../types"; // Remove unused import

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞–º–∏
 */
export async function handleHashtagEnter(
  ctx: ScraperBotContext & {
    scene: { session: ScraperSceneSessionData; leave: () => void };
  }
) {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = ctx.scene.session.projectId;

  if (!projectId) {
    await ctx.reply(
      "–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
    );
    return ctx.scene.leave();
  }

  try {
    await adapter.initialize();
    const hashtags = await adapter.getHashtagsByProjectId(projectId);
    const projectName =
      (await adapter.getProjectById(projectId))?.name ||
      `–ü—Ä–æ–µ–∫—Ç ID ${projectId}`;

    if (!hashtags || hashtags.length === 0) {
      await ctx.reply(
        `–í –ø—Ä–æ–µ–∫—Ç–µ "${projectName}" –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?`,
        {
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                `add_hashtag_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)],
          ]).reply_markup,
        }
      );
    } else {
      const hashtagList = hashtags
        .map((h, i) => `${i + 1}. #${h.hashtag}`)
        .join("\n");
      const hashtagButtons = hashtags.map((h) => [
        Markup.button.callback(
          `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #${h.hashtag}`,
          `delete_hashtag_${projectId}_${h.hashtag}`
        ),
      ]);

      await ctx.reply(
        `–•–µ—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}":\n\n${hashtagList}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
        {
          reply_markup: Markup.inlineKeyboard([
            ...hashtagButtons,
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                `add_hashtag_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)],
          ]).reply_markup,
        }
      );
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  } finally {
    if (adapter) {
      await adapter.close();
    }
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥"
 */
export async function handleAddHashtagAction(
  ctx: ScraperBotContext & {
    scene: { session: ScraperSceneSessionData };
    match: RegExpExecArray;
    answerCbQuery: () => Promise<boolean>;
  }
) {
  const projectId = parseInt(ctx.match[1], 10);
  if (isNaN(projectId)) {
    console.error(
      `Invalid projectId parsed from add_hashtag action: ${ctx.match[1]}`
    );
    await ctx.reply("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.");
    await ctx.answerCbQuery();
    return;
  }
  ctx.scene.session.projectId = projectId;
  ctx.scene.session.step = ScraperSceneStep.ADD_HASHTAG;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ #):", {
    reply_markup: Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç–º–µ–Ω–∞", `cancel_hashtag_input_${projectId}`)],
    ]).reply_markup,
  });
  await ctx.answerCbQuery();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –≤–≤–æ–¥–µ —Ö–µ—à—Ç–µ–≥–∞
 */
export async function handleCancelHashtagInputAction(
  ctx: ScraperBotContext & {
    scene: { session: ScraperSceneSessionData; reenter: () => void };
    answerCbQuery: (text?: string) => Promise<boolean>;
    deleteMessage: () => Promise<boolean>;
  }
) {
  await ctx.deleteMessage();
  ctx.scene.session.step = undefined;
  await ctx.answerCbQuery("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.");
  ctx.scene.reenter();
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ö–µ—à—Ç–µ–≥–∞
 */
export async function handleHashtagTextInput(
  ctx: ScraperBotContext & {
    scene: {
      session: ScraperSceneSessionData;
      leave: () => void;
      reenter: () => void;
    };
    message: { text: string };
  }
) {
  if (ctx.scene.session.step !== ScraperSceneStep.ADD_HASHTAG) {
    return;
  }

  const adapter = ctx.storage as NeonAdapter;
  const projectId = ctx.scene.session.projectId;
  let hashtagInput = ctx.message.text.trim();

  if (!projectId) {
    await ctx.reply("–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    ctx.scene.session.step = undefined;
    return ctx.scene.leave();
  }

  if (hashtagInput.startsWith("#")) {
    hashtagInput = hashtagInput.substring(1);
  }

  if (!hashtagInput || hashtagInput.includes(" ") || hashtagInput.length < 2) {
    await ctx.reply(
      "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à—Ç–µ–≥. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞), # —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
    );
    return;
  }

  try {
    await adapter.initialize();
    const addedHashtag = await adapter.addHashtag(projectId, hashtagInput);
    if (addedHashtag) {
      await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtagInput} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
    } else {
      await ctx.reply(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥ #${hashtagInput}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`
      );
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtagInput} –≤ –ø—Ä–æ–µ–∫—Ç ${projectId}:`,
      error
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
  } finally {
    if (adapter) {
      await adapter.close();
    }
    ctx.scene.session.step = undefined;
    ctx.scene.reenter();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞
 */
export async function handleDeleteHashtagAction(
  ctx: ScraperBotContext & {
    scene: { session: ScraperSceneSessionData; reenter: () => void };
    match: RegExpExecArray;
    answerCbQuery: (text?: string) => Promise<boolean>;
  }
) {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = parseInt(ctx.match[1], 10);
  const hashtag = ctx.match[2];

  if (isNaN(projectId) || !hashtag) {
    console.error(
      `Invalid data parsed from delete hashtag action: projectId=${ctx.match[1]}, hashtag=${ctx.match[2]}`
    );
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    return;
  }

  try {
    await adapter.initialize();
    await adapter.removeHashtag(projectId, hashtag);
    await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtag} —É–¥–∞–ª–µ–Ω.`);
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtag} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
  } finally {
    if (adapter) {
      await adapter.close();
    }
    ctx.scene.reenter();
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É
 */
export async function handleBackToProjectAction(
  ctx: ScraperBotContext & {
    scene: { leave: () => void };
    answerCbQuery: () => Promise<boolean>;
    // match: RegExpExecArray; // match –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, –Ω–æ –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ projectScene
  }
) {
  await ctx.scene.leave();
  await ctx.reply("–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–º...");
  await ctx.answerCbQuery();
  // TODO: –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å ctx.scene.enter('instagram_scraper_projects') —Å –ø–µ—Ä–µ–¥–∞—á–µ–π projectId
}

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export const hashtagScene = new Scenes.BaseScene<
  ScraperBotContext & { scene: { session: ScraperSceneSessionData } }
>("instagram_scraper_hashtags");

// –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —Å–æ–±—ã—Ç–∏—è–º —Å—Ü–µ–Ω—ã
hashtagScene.enter(handleHashtagEnter);
hashtagScene.action(/add_hashtag_(\d+)/, handleAddHashtagAction);
hashtagScene.action(
  /cancel_hashtag_input_(\d+)/,
  handleCancelHashtagInputAction
);
hashtagScene.on("text", handleHashtagTextInput);
hashtagScene.action(/delete_hashtag_(\d+)_(.+)/, handleDeleteHashtagAction);
hashtagScene.action(/project_(\d+)/, handleBackToProjectAction);

export default hashtagScene;
