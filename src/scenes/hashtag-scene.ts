import { Scenes, Markup } from "telegraf";
import { ScraperBotContext } from "../types";
import { NeonAdapter } from "../adapters/neon-adapter";
import { ScraperSceneStep, ScraperSceneSessionData } from "@/types";
// import { User } from "../types"; // Remove unused import

/**
 * –°—Ü–µ–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export const hashtagScene = new Scenes.BaseScene<
  ScraperBotContext & { scene: { session: ScraperSceneSessionData } }
>("instagram_scraper_hashtags");

// –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É - –ø–æ–∫–∞–∑ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
hashtagScene.enter(async (ctx) => {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = ctx.scene.session.projectId;

  if (!projectId) {
    await ctx.reply(
      "–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç."
    );
    return ctx.scene.leave();
  }

  try {
    await adapter.initialize();
    // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏
    const hashtags = await adapter.getHashtagsByProjectId(projectId);
    const projectName =
      (await adapter.getProjectById(projectId))?.name ||
      `–ü—Ä–æ–µ–∫—Ç ID ${projectId}`;

    if (!hashtags || hashtags.length === 0) {
      await ctx.reply(
        `–í –ø—Ä–æ–µ–∫—Ç–µ "${projectName}" –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?`,
        {
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                `add_hashtag_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)], // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–º
          ]).reply_markup,
        }
      );
    } else {
      const hashtagList = hashtags
        .map((h, i) => `${i + 1}. #${h.hashtag}`)
        .join("\n");
      // TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      const hashtagButtons = hashtags.map((h) => [
        Markup.button.callback(
          `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #${h.hashtag}`,
          `delete_hashtag_${projectId}_${h.hashtag}`
        ),
      ]);

      await ctx.reply(
        `–•–µ—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${projectName}":\n\n${hashtagList}\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?`,
        {
          reply_markup: Markup.inlineKeyboard([
            ...hashtagButtons, // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            [
              Markup.button.callback(
                "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                `add_hashtag_${projectId}`
              ),
            ],
            [Markup.button.callback("–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É", `project_${projectId}`)],
          ]).reply_markup,
        }
      );
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    // –ù–µ –ø–æ–∫–∏–¥–∞–µ–º —Å—Ü–µ–Ω—É, –¥–∞–µ–º —à–∞–Ω—Å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è
  } finally {
    if (adapter) {
      await adapter.close();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥"
hashtagScene.action(/add_hashtag_(\d+)/, async (ctx) => {
  const projectId = parseInt(ctx.match[1], 10);
  if (isNaN(projectId)) {
    console.error(
      `Invalid projectId parsed from add_hashtag action: ${ctx.match[1]}`
    );
    await ctx.reply("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.");
    await ctx.answerCbQuery();
    return;
  }
  ctx.scene.session.projectId = projectId; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ projectId –≤ —Å–µ—Å—Å–∏–∏
  ctx.scene.session.step = ScraperSceneStep.ADD_HASHTAG;
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Ö–µ—à—Ç–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–±–µ–∑ #):", {
    reply_markup: Markup.inlineKeyboard([
      [Markup.button.callback("–û—Ç–º–µ–Ω–∞", `cancel_hashtag_input_${projectId}`)],
    ]).reply_markup,
  });
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –ø—Ä–∏ –≤–≤–æ–¥–µ —Ö–µ—à—Ç–µ–≥–∞
hashtagScene.action(/cancel_hashtag_input_(\d+)/, async (ctx) => {
  await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
  ctx.scene.session.step = undefined;
  await ctx.answerCbQuery("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.");
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é —Ö–µ—à—Ç–µ–≥–æ–≤
  ctx.scene.reenter();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–≤–æ–¥ —Ö–µ—à—Ç–µ–≥–∞)
hashtagScene.on("text", async (ctx) => {
  if (ctx.scene.session.step !== ScraperSceneStep.ADD_HASHTAG) {
    return; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ö–µ—à—Ç–µ–≥–∞
  }

  const adapter = ctx.storage as NeonAdapter;
  const projectId = ctx.scene.session.projectId;
  let hashtagInput = ctx.message.text.trim();

  if (!projectId) {
    await ctx.reply("–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.");
    ctx.scene.session.step = undefined;
    return ctx.scene.leave();
  }

  // –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
  if (hashtagInput.startsWith("#")) {
    hashtagInput = hashtagInput.substring(1);
  }

  // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
  if (!hashtagInput || hashtagInput.includes(" ") || hashtagInput.length < 2) {
    await ctx.reply(
      "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–µ—à—Ç–µ–≥. –í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞), # —Å—Ç–∞–≤–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
    );
    // –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
    return;
  }

  try {
    await adapter.initialize();
    const addedHashtag = await adapter.addHashtag(projectId, hashtagInput);
    if (addedHashtag) {
      await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtagInput} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.`);
    } else {
      await ctx.reply(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥ #${hashtagInput}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.`
      );
    }
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtagInput} –≤ –ø—Ä–æ–µ–∫—Ç ${projectId}:`,
      error
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
  } finally {
    if (adapter) {
      await adapter.close();
    }
    ctx.scene.session.step = undefined; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
    ctx.scene.reenter(); // –ü–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ö–µ—à—Ç–µ–≥–∞
hashtagScene.action(/delete_hashtag_(\d+)_(.+)/, async (ctx) => {
  const adapter = ctx.storage as NeonAdapter;
  const projectId = parseInt(ctx.match[1], 10);
  const hashtag = ctx.match[2];

  if (isNaN(projectId) || !hashtag) {
    console.error(
      `Invalid data parsed from delete hashtag action: projectId=${ctx.match[1]}, hashtag=${ctx.match[2]}`
    );
    await ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
    return;
  }

  try {
    await adapter.initialize();
    await adapter.removeHashtag(projectId, hashtag); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
    await ctx.reply(`–•–µ—à—Ç–µ–≥ #${hashtag} —É–¥–∞–ª–µ–Ω.`);
    await ctx.answerCbQuery("–£–¥–∞–ª–µ–Ω–æ");
  } catch (error) {
    console.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞ ${hashtag} –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ ${projectId}:`,
      error
    );
    await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–∞.");
    await ctx.answerCbQuery("–û—à–∏–±–∫–∞");
  } finally {
    if (adapter) {
      await adapter.close();
    }
    ctx.scene.reenter(); // –ü–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
  }
});

// –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É (–≤—ã—Ö–æ–¥ –∏–∑ —Å—Ü–µ–Ω—ã —Ö–µ—à—Ç–µ–≥–æ–≤)
hashtagScene.action(/project_(\d+)/, async (ctx) => {
  // TODO: –í–æ–∑–º–æ–∂–Ω–æ, –ª—É—á—à–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ projectScene, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏—Ç—å?
  // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
  await ctx.scene.leave();
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç—É
  await ctx.reply("–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–æ–º...");
  await ctx.answerCbQuery();
  // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /projects, —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å projectScene
  // –≠—Ç–æ –Ω–µ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–±, –≤ –∏–¥–µ–∞–ª–µ –Ω—É–∂–Ω–æ ctx.scene.enter('project_scene_id')
  // –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å projectId –∏–ª–∏ –∫–∞–∫-—Ç–æ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
  // ctx.telegram.sendMessage(ctx.chat.id, '/projects'); // –ù–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–∑ callback
});

export default hashtagScene;
