/**
 * @file –ú–æ–∫–∏ –¥–ª—è UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ Telegram
 * @description –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –¥—Ä—É–≥–∏—Ö UI-—ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */

// –ò–º–ø–æ—Ä—Ç—ã —Ç–∏–ø–æ–≤ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 * @param buttons –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [[{text, callback_data}, ...], ...]
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
export function createInlineKeyboardMock(
  buttons: Array<Array<{ text: string; callback_data: string }>>
): any {
  return {
    reply_markup: {
      inline_keyboard: buttons
    }
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
 * @param callbackData –î–∞–Ω–Ω—ã–µ –¥–ª—è callback_query
 * @returns –û–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏
 */
export function createBackButtonMock(callbackData: string = "back"): any {
  return createInlineKeyboardMock([[{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: callbackData }]]);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * @param projects –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
 */
export function createProjectListKeyboardMock(
  projects: Array<{ id: number; name: string }>
): any {
  const buttons = projects.map(project => [{
    text: project.name,
    callback_data: `project_${project.id}`
  }]);

  buttons.push([{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç", callback_data: "create_project" }]);
  buttons.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "back" }]);

  return createInlineKeyboardMock(buttons);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
 * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –º–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
 */
export function createProjectMenuKeyboardMock(projectId: number): any {
  const buttons = [
    [{ text: "üë• –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", callback_data: `competitors_${projectId}` }],
    [{ text: "#Ô∏è‚É£ –•–µ—à—Ç–µ–≥–∏", callback_data: `hashtags_${projectId}` }],
    [{ text: "üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥", callback_data: `start_parsing_${projectId}` }],
    [{ text: "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞", callback_data: `parsing_results_${projectId}` }],
    [{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: "back" }]
  ];

  return createInlineKeyboardMock(buttons);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param competitors –ú–∞—Å—Å–∏–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */
export function createCompetitorListKeyboardMock(
  projectId: number,
  competitors: Array<{ id: number; username: string }>
): any {
  const buttons = competitors.map(competitor => [{
    text: `@${competitor.username}`,
    callback_data: `competitor_${competitor.id}`
  }]);

  buttons.push([{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞", callback_data: `add_competitor_${projectId}` }]);
  buttons.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `project_${projectId}` }]);

  return createInlineKeyboardMock(buttons);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ö–µ—à—Ç–µ–≥–æ–≤
 * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param hashtags –ú–∞—Å—Å–∏–≤ —Ö–µ—à—Ç–µ–≥–æ–≤
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤
 */
export function createHashtagListKeyboardMock(
  projectId: number,
  hashtags: Array<{ id: number; name: string }>
): any {
  const buttons = hashtags.map(hashtag => [{
    text: `#${hashtag.name}`,
    callback_data: `hashtag_${hashtag.id}`
  }]);

  buttons.push([{ text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥", callback_data: `add_hashtag_${projectId}` }]);
  buttons.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `project_${projectId}` }]);

  return createInlineKeyboardMock(buttons);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
 * @param projectId ID –ø—Ä–æ–µ–∫—Ç–∞
 * @param parsingRunIds –ú–∞—Å—Å–∏–≤ ID –∑–∞–ø—É—Å–∫–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
 * @returns –û–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
 */
export function createParsingResultsKeyboardMock(
  projectId: number,
  parsingRunIds: number[]
): any {
  const buttons = parsingRunIds.map(id => [{
    text: `–ó–∞–ø—É—Å–∫ #${id}`,
    callback_data: `parsing_run_${id}`
  }]);

  buttons.push([{ text: "‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data: `project_${projectId}` }]);

  return createInlineKeyboardMock(buttons);
}
