import {
  describe,
  it,
  expect,
  beforeEach,
  jest,
} from "bun:test";
import { Telegraf } from "telegraf";
import { setupInstagramScraperBot } from "../../..";
import { Update } from "telegraf/types";
import type {
  ScraperBotContext,
  InstagramScraperBotConfig,
  StorageAdapter,
} from "../../types";
import { createMockStorageAdapter } from "../helpers/types";

describe.skip("E2E: Command Handlers", () => {
  let bot: Telegraf<ScraperBotContext>;
  let mockSceneEnter: jest.Mock;
  let mockStorage: StorageAdapter;

  const mockConfig: InstagramScraperBotConfig = {
    telegramBotToken: "test-bot-token",
    apifyClientToken: "test-apify-token",
  };

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è scene.enter
    mockSceneEnter = jest.fn();

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    mockStorage = createMockStorageAdapter();

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å –º–∏–¥–ª–≤–∞—Ä–æ–π –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è scene.enter
    bot = new Telegraf<ScraperBotContext>("test-bot-token");

    // –ú–æ–∫–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ getMe
    bot.telegram.getMe = jest.fn().mockResolvedValue({
      id: 987654321,
      is_bot: true,
      first_name: "TestBot",
      username: "TestBot_username",
      can_join_groups: true,
      can_read_all_group_messages: false,
      supports_inline_queries: false,
    });

    bot.use((ctx: any, next) => {
      ctx.scene = { enter: mockSceneEnter };
      return next();
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ—Ç —Å –º–æ–∫-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
    setupInstagramScraperBot(bot, mockStorage, mockConfig);
  });

  it("should enter project scene when /projects command is called", async () => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /projects
    const update: Update = {
      update_id: 123457,
      message: {
        message_id: 2,
        date: Math.floor(Date.now() / 1000),
        chat: {
          id: 12345,
          type: 'private',
          first_name: 'Test',
          username: 'testuser'
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: 'Test',
          username: 'testuser'
        },
        text: '/projects',
        entities: [
          {
            offset: 0,
            length: 9,
            type: 'bot_command'
          }
        ]
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /projects
    await bot.handleUpdate(update);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(mockSceneEnter).toHaveBeenCalledWith("instagram_scraper_projects");
  });

  it("should enter competitor scene when /competitors command is called", async () => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /competitors
    const update: Update = {
      update_id: 123459,
      message: {
        message_id: 4,
        date: Math.floor(Date.now() / 1000),
        chat: {
          id: 12345,
          type: 'private',
          first_name: 'Test',
          username: 'testuser'
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: 'Test',
          username: 'testuser'
        },
        text: '/competitors',
        entities: [
          {
            offset: 0,
            length: 12,
            type: 'bot_command'
          }
        ]
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /competitors
    await bot.handleUpdate(update);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(mockSceneEnter).toHaveBeenCalledWith("instagram_scraper_competitors");
  });

  it("should enter project scene when 'üìä –ü—Ä–æ–µ–∫—Ç—ã' message is received", async () => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const update: Update = {
      update_id: 123460,
      message: {
        message_id: 5,
        date: Math.floor(Date.now() / 1000),
        chat: {
          id: 12345,
          type: 'private',
          first_name: 'Test',
          username: 'testuser'
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: 'Test',
          username: 'testuser'
        },
        text: 'üìä –ü—Ä–æ–µ–∫—Ç—ã'
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.handleUpdate(update);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(mockSceneEnter).toHaveBeenCalledWith("instagram_scraper_projects");
  });

  it("should enter competitor scene when 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã' message is received", async () => {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const update: Update = {
      update_id: 123461,
      message: {
        message_id: 6,
        date: Math.floor(Date.now() / 1000),
        chat: {
          id: 12345,
          type: 'private',
          first_name: 'Test',
          username: 'testuser'
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: 'Test',
          username: 'testuser'
        },
        text: 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã'
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await bot.handleUpdate(update);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ scene.enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(mockSceneEnter).toHaveBeenCalledWith("instagram_scraper_competitors");
  });
});
