import { describe, it, expect, mock, beforeEach, afterEach } from "bun:test";
import { jest } from "@jest/globals";
import { Telegraf, Scenes } from "telegraf";
import { setupInstagramScraperBot } from "../../../index";
import { ScraperBotContext, StorageAdapter, InstagramScraperBotConfig } from "@/types";
import { projectScene } from "../../../src/scenes/project-scene";
import { competitorScene } from "../../../src/scenes/competitor-scene";
import { hashtagScene } from "../../../src/scenes/hashtag-scene";

// –ú–æ–∫–∏—Ä—É–µ–º —Å—Ü–µ–Ω—ã
mock.module("../../../src/scenes/project-scene", () => ({
  projectScene: {
    name: "instagram_scraper_projects",
    middleware: () => {},
  },
}));

mock.module("../../../src/scenes/competitor-scene", () => ({
  competitorScene: {
    name: "instagram_scraper_competitors",
    middleware: () => {},
  },
}));

mock.module("../../../src/scenes/hashtag-scene", () => ({
  hashtagScene: {
    name: "instagram_scraper_hashtags",
    middleware: () => {},
  },
}));

describe("Instagram Scraper Bot Setup", () => {
  let bot: Telegraf<ScraperBotContext>;
  let storageAdapter: StorageAdapter;
  let config: InstagramScraperBotConfig;

  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    bot = {
      use: jest.fn(),
      command: jest.fn(),
      hears: jest.fn(),
      launch: jest.fn(),
      catch: jest.fn(),
    } as unknown as Telegraf<ScraperBotContext>;

    storageAdapter = {
      initialize: jest.fn().mockResolvedValue(undefined),
      close: jest.fn().mockResolvedValue(undefined),
      getUserByTelegramId: jest.fn(),
      findUserByTelegramIdOrCreate: jest.fn(),
      getProjectsByUserId: jest.fn(),
      getProjectById: jest.fn(),
      createProject: jest.fn(),
      getCompetitorAccounts: jest.fn(),
      addCompetitorAccount: jest.fn(),
      deleteCompetitorAccount: jest.fn(),
      getHashtagsByProjectId: jest.fn(),
      addHashtag: jest.fn(),
      removeHashtag: jest.fn(),
      getReelsByCompetitorId: jest.fn(),
      saveReels: jest.fn(),
      getReels: jest.fn(),
      logParsingRun: jest.fn(),
      getParsingRunLogs: jest.fn(),
    };

    config = {
      maxProjectsPerUser: 5,
      maxCompetitorsPerProject: 10,
      maxHashtagsPerProject: 20,
    };

    // –ú–æ–∫–∏—Ä—É–µ–º Scenes.Stage
    mock.module("telegraf", () => ({
      Scenes: {
        Stage: function() {
          return {
            middleware: () => () => {}
          };
        }
      }
    }));
  });

  it("should initialize the bot with storage adapter and config", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ middleware –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω
    expect(bot.use).toHaveBeenCalledTimes(2); // –û–¥–∏–Ω —Ä–∞–∑ –¥–ª—è middleware, –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è stage
  });

  it("should register scenes", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ bot.use –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã (–æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è middleware, –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è stage)
    expect(bot.use).toHaveBeenCalledTimes(2);
  });

  it("should register command handlers", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    expect(bot.command).toHaveBeenCalledWith("projects", expect.any(Function));
    expect(bot.command).toHaveBeenCalledWith("competitors", expect.any(Function));
  });

  it("should enter project scene when /projects command is called", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã projects
    const projectsHandler = (bot.command as jest.Mock).mock.calls.find(
      call => call[0] === "projects"
    )[1];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = {
      scene: {
        enter: jest.fn()
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    projectsHandler(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_projects");
  });

  it("should enter competitor scene when /competitors command is called", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã competitors
    const competitorsHandler = (bot.command as jest.Mock).mock.calls.find(
      call => call[0] === "competitors"
    )[1];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = {
      scene: {
        enter: jest.fn()
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    competitorsHandler(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_competitors");
  });

  it("should register text message handlers", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    expect(bot.hears).toHaveBeenCalledWith("üìä –ü—Ä–æ–µ–∫—Ç—ã", expect.any(Function));
    expect(bot.hears).toHaveBeenCalledWith("üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", expect.any(Function));
  });

  it("should enter project scene when 'üìä –ü—Ä–æ–µ–∫—Ç—ã' message is received", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const projectsHandler = (bot.hears as jest.Mock).mock.calls.find(
      call => call[0] === "üìä –ü—Ä–æ–µ–∫—Ç—ã"
    )[1];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = {
      scene: {
        enter: jest.fn()
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    projectsHandler(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_projects");
  });

  it("should enter competitor scene when 'üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã' message is received", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const competitorsHandler = (bot.hears as jest.Mock).mock.calls.find(
      call => call[0] === "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"
    )[1];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç
    const ctx = {
      scene: {
        enter: jest.fn()
      }
    };

    // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    competitorsHandler(ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ enter —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å—Ü–µ–Ω—ã
    expect(ctx.scene.enter).toHaveBeenCalledWith("instagram_scraper_competitors");
  });

  it("should return API with scene entry methods", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    const api = setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—ã
    expect(api.enterProjectScene()).toBe("instagram_scraper_projects");
    expect(api.enterCompetitorScene()).toBe("instagram_scraper_competitors");
  });

  it("should return API with menu buttons", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    const api = setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
    const menuButtons = api.getMenuButtons();
    expect(menuButtons).toHaveLength(3);
    expect(menuButtons[0]).toEqual(["üìä –ü—Ä–æ–µ–∫—Ç—ã", "üîç –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã"]);
    expect(menuButtons[1]).toEqual(["#Ô∏è‚É£ –•—ç—à—Ç–µ–≥–∏", "üé¨ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥"]);
    expect(menuButtons[2]).toEqual(["üì± –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]);
  });

  it("should return API with commands for registration", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    const api = setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ Telegram
    const commands = api.getCommands();
    expect(commands).toHaveLength(5);
    expect(commands[0]).toEqual({ command: "projects", description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏" });
    expect(commands[1]).toEqual({ command: "competitors", description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏" });
    expect(commands[2]).toEqual({ command: "hashtags", description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö—ç—à—Ç–µ–≥–∞–º–∏" });
    expect(commands[3]).toEqual({ command: "scrape", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–∏–Ω–≥" });
    expect(commands[4]).toEqual({ command: "reels", description: "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" });
  });

  it("should pass storage adapter and config to middleware", () => {
    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é setupInstagramScraperBot
    setupInstagramScraperBot(bot, storageAdapter, config);

    // –ü–æ–ª—É—á–∞–µ–º middleware, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ bot.use
    const middleware = (bot.use as any).mock.calls[0][0];

    // –°–æ–∑–¥–∞–µ–º –º–æ–∫-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ next-—Ñ—É–Ω–∫—Ü–∏—é
    const ctx = {} as ScraperBotContext;
    const next = jest.fn();

    // –í—ã–∑—ã–≤–∞–µ–º middleware
    middleware(ctx, next);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ storage –∏ scraperConfig –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    expect(ctx.storage).toBe(storageAdapter);
    expect(ctx.scraperConfig).toBe(config);
    expect(next).toHaveBeenCalled();
  });
});
