import {
  describe,
  it,
  expect,
  beforeEach,
  afterEach,
  jest,
  mock,
  spyOn,
} from "bun:test";
import { Context, Markup } from "telegraf";
import { Update, UserFromGetMe, CallbackQuery, Message } from "telegraf/types";
import {
  hashtagScene,
  // TODO: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –±—É–¥–µ–º –∏—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
} from "../../../scenes/hashtag-scene";
import { NeonAdapter } from "../../../adapters/neon-adapter";
import {
  ScraperBotContext,
  ScraperSceneSessionData,
  ScraperSceneStep,
  Project,
  Hashtag,
} from "@/types";

// –ú–æ–∫–∏—Ä—É–µ–º NeonAdapter
mock.module("../../../adapters/neon-adapter", () => {
  return {
    NeonAdapter: jest.fn().mockImplementation(() => ({
      initialize: jest.fn<() => Promise<void>>().mockResolvedValue(undefined),
      close: jest.fn<() => Promise<void>>().mockResolvedValue(undefined),
      getUserByTelegramId: jest.fn(),
      getProjectById: jest.fn(),
      getHashtagsByProjectId: jest.fn(),
      addHashtag: jest.fn(),
      removeHashtag: jest.fn(),
    })),
  };
});

let mockNeonAdapterInstance: NeonAdapter & {
  [K in keyof NeonAdapter]: jest.Mock;
};

// –¢–∏–ø –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è —Å—Ü–µ–Ω
type SceneTestContext = ScraperBotContext & {
  scene: {
    enter: jest.Mock;
    leave: jest.Mock;
    reenter: jest.Mock;
    session: ScraperSceneSessionData;
    // –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—Ü–µ–Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, current
    current?: Scenes.Scene<SceneTestContext>;
  };
  reply: jest.Mock;
  editMessageReplyMarkup: jest.Mock;
  deleteMessage: jest.Mock;
  answerCbQuery: jest.Mock;
  match?: RegExpExecArray | null; // –î–ª—è action-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
  message?: Partial<Message.TextMessage>; // –î–ª—è on('text') —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
  update?: Partial<Update.CallbackQueryUpdate | Update.MessageUpdate>; // –î–ª—è –æ–±—â–µ–≥–æ update –æ–±—ä–µ–∫—Ç–∞
};

const createMockSceneContext = (
  initialSession: Partial<ScraperSceneSessionData> = {}
): SceneTestContext => {
  const botInfo: UserFromGetMe = {
    id: 12345,
    is_bot: true,
    first_name: "TestBot",
    username: "TestBot",
    can_join_groups: true,
    can_read_all_group_messages: true,
    supports_inline_queries: true,
  };

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegraf
  // –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π update –æ–±—ä–µ–∫—Ç –≤ Context –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∑–¥–µ—Å—å,
  // —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ (message, callback_query)
  const ctx = new Context(
    { update_id: 1 } as Update,
    {} as any,
    botInfo
  ) as SceneTestContext;

  // –ú–æ–∫–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ü–µ–Ω—ã –º–µ—Ç–æ–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
  ctx.scene = {
    enter: jest.fn(),
    leave: jest.fn(),
    reenter: jest.fn(),
    session: { ...initialSession } as ScraperSceneSessionData,
    current: hashtagScene as any, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ hashtagScene - —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å—Ü–µ–Ω—ã
  };
  ctx.reply = jest.fn().mockResolvedValue(true);
  ctx.editMessageReplyMarkup = jest.fn().mockResolvedValue(true);
  ctx.deleteMessage = jest.fn().mockResolvedValue(true);
  ctx.answerCbQuery = jest.fn().mockResolvedValue(true);

  const adapterInstance = new NeonAdapter();
  ctx.storage = adapterInstance;
  mockNeonAdapterInstance = adapterInstance as NeonAdapter & {
    [K in keyof NeonAdapter]: jest.Mock;
  };

  return ctx;
};

describe("hashtagScene", () => {
  let ctx: SceneTestContext;
  const mockProjectId = 123;
  const mockProject: Partial<Project> = {
    id: mockProjectId,
    name: "Test Project",
  };

  beforeEach(() => {
    jest.clearAllMocks();
    // ctx –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º describe –±–ª–æ–∫–µ –∏–ª–∏ —Ç–µ—Å—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  });

  describe("enter handler", () => {
    it("should reply with no hashtags message if projectId is not in session", async () => {
      ctx = createMockSceneContext(); // –ë–µ–∑ projectId –≤ —Å–µ—Å—Å–∏–∏
      await hashtagScene.enter(ctx, jest.fn());
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining("–ø—Ä–æ–µ–∫—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
      );
      expect(ctx.scene.leave).toHaveBeenCalled();
      expect(mockNeonAdapterInstance.initialize).not.toHaveBeenCalled();
    });

    it("should display hashtags if found for the project", async () => {
      ctx = createMockSceneContext({ projectId: mockProjectId });
      const mockHashtags: Hashtag[] = [
        {
          id: 1,
          project_id: mockProjectId,
          hashtag: "tag1",
          created_at: new Date(),
        },
        {
          id: 2,
          project_id: mockProjectId,
          hashtag: "tag2",
          created_at: new Date(),
        },
      ];
      mockNeonAdapterInstance.getProjectById.mockResolvedValue(
        mockProject as Project
      );
      mockNeonAdapterInstance.getHashtagsByProjectId.mockResolvedValue(
        mockHashtags
      );

      await hashtagScene.enter(ctx, jest.fn());

      expect(mockNeonAdapterInstance.initialize).toHaveBeenCalledTimes(1);
      expect(
        mockNeonAdapterInstance.getHashtagsByProjectId
      ).toHaveBeenCalledWith(mockProjectId);
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining(`–•–µ—à—Ç–µ–≥–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ "${mockProject.name}"`),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              [
                expect.objectContaining({
                  text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #tag1",
                  callback_data: `delete_hashtag_${mockProjectId}_tag1`,
                }),
              ],
              [
                expect.objectContaining({
                  text: "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #tag2",
                  callback_data: `delete_hashtag_${mockProjectId}_tag2`,
                }),
              ],
              [
                expect.objectContaining({
                  text: "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                  callback_data: `add_hashtag_${mockProjectId}`,
                }),
              ],
              [
                expect.objectContaining({
                  text: "–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É",
                  callback_data: `project_${mockProjectId}`,
                }),
              ],
            ]),
          }),
        })
      );
      expect(mockNeonAdapterInstance.close).toHaveBeenCalledTimes(1);
    });

    it("should display 'no hashtags' message and add/back buttons if no hashtags found", async () => {
      ctx = createMockSceneContext({ projectId: mockProjectId });
      mockNeonAdapterInstance.getProjectById.mockResolvedValue(
        mockProject as Project
      );
      mockNeonAdapterInstance.getHashtagsByProjectId.mockResolvedValue([]); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤

      await hashtagScene.enter(ctx, jest.fn());

      expect(mockNeonAdapterInstance.initialize).toHaveBeenCalledTimes(1);
      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining(
          `–Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π?`
        ),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: [
              [
                expect.objectContaining({
                  text: "–î–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥",
                  callback_data: `add_hashtag_${mockProjectId}`,
                }),
              ],
              [
                expect.objectContaining({
                  text: "–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É",
                  callback_data: `project_${mockProjectId}`,
                }),
              ],
            ],
          }),
        })
      );
      expect(mockNeonAdapterInstance.close).toHaveBeenCalledTimes(1);
    });

    it("should handle error if getHashtagsByProjectId fails", async () => {
      ctx = createMockSceneContext({ projectId: mockProjectId });
      const dbError = new Error("DB Error on getHashtags");
      mockNeonAdapterInstance.getProjectById.mockResolvedValue(
        mockProject as Project
      );
      mockNeonAdapterInstance.getHashtagsByProjectId.mockRejectedValue(dbError);
      const consoleErrorSpy = spyOn(console, "error").mockImplementation(
        () => {}
      );

      await hashtagScene.enter(ctx, jest.fn());

      expect(ctx.reply).toHaveBeenCalledWith(
        expect.stringContaining("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥–æ–≤")
      );
      expect(consoleErrorSpy).toHaveBeenCalledWith(
        expect.stringContaining("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–µ—à—Ç–µ–≥–æ–≤"),
        dbError
      );
      expect(mockNeonAdapterInstance.close).toHaveBeenCalledTimes(1);
      consoleErrorSpy.mockRestore();
    });
  });

  // TODO: –¢–µ—Å—Ç—ã –¥–ª—è action(/add_hashtag_(\d+)/)
  // TODO: –¢–µ—Å—Ç—ã –¥–ª—è on('text') - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ö–µ—à—Ç–µ–≥–∞
  // TODO: –¢–µ—Å—Ç—ã –¥–ª—è action(/delete_hashtag_(\d+)_(.+)/)
  // TODO: –¢–µ—Å—Ç—ã –¥–ª—è action(/project_(\d+)/) - –Ω–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç—É
  // TODO: –¢–µ—Å—Ç—ã –¥–ª—è action(/cancel_hashtag_input_(\d+)/)
});
